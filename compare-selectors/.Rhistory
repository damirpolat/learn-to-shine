xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "red",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 2,
stroke_dasharray = "10, 5"))
scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "red",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = "10, 5"))
scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "red",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5))
learner1$id
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "red",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner2$id))
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "red",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id))
scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "red",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
scatterD3(data = data, x = x, y = y, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "purple",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
library(scatterD3)
runApp('~/learn-to-shine/compareSelectorsD3.R')
runApp('~/learn-to-shine/compareSelectorsD3.R')
runApp('~/learn-to-shine/compareSelectorsD3.R')
runApp('~/learn-to-shine/compareSelectorsD3.R')
runApp('~/learn-to-shine/compareSelectorsD3.R')
runApp('~/learn-to-shine/compareSelectorsD3.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectorsPlotly.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
listLearners()
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
?column
runApp('~/learn-to-shine/compareSelectors.R')
?row
?row
?selectInput
state.name
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
x = cbind(values = penalties1, method = "mcp")
x = cbind(values = penalties1, method = "mcp")
head(x)
penalties1
x = cbind.data.frame(values = penalties1, method = "mcp")
head(x)
par1 = parscores(llama.cv, selector1)
par2 = parscores(llama.cv, selector1)
xpar = cbind.data.frame(values = par1, method = "par10")
ypar = cbind.data.frame(values = par2, method = "par10")
head(x)
head(xpar)
x_mcp = cbind.data.frame(values = penalties1, method = "mcp")
y_mcp = cbind.data.frame(values = penalties2, method = "mcp")
x_par = cbind.data.frame(values = par1, method = "par10")
y_par = cbind.data.frame(values = par2, method = "par10")
x = rbind(x_mcp, x_par)
head(x)
tail(x)
y = rbind(y_mcp, y_par)
head(y)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
head(data)
data = cbind.data.frame(data, x)
head(data)
data = cbind.data.frame(data, y)
head(data)
x_mcp = cbind.data.frame(values = penalties1, method = "mcp")
y_mcp = cbind.data.frame(values = penalties2)
x_par = cbind.data.frame(values = par1, method = "par10")
y_par = cbind.data.frame(values = par2)
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
head(x)
head(y)
x_mcp = cbind.data.frame(values = penalties1, method = "mcp")
y_mcp = cbind.data.frame(values = penalties2, method = "mcp")
x_par = cbind.data.frame(values = par1, method = "par10")
y_par = cbind.data.frame(values = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x)
data = cbind.data.frame(data, y)
head(data)
head(data)
x_mcp = cbind.data.frame(values = penalties1, method = "mcp")
y_mcp = cbind.data.frame(values = penalties2)
x_par = cbind.data.frame(values = par1, method = "par10")
y_par = cbind.data.frame(values = par2)
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x)
data = cbind.data.frame(data, y)
head(data)
x_mcp = cbind.data.frame(values = penalties1)
y_mcp = cbind.data.frame(values = penalties2, method = "mcp")
x_par = cbind.data.frame(values = par1)
y_par = cbind.data.frame(values = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x)
data = cbind.data.frame(data, y)
head(data)
x_mcp = cbind.data.frame(values = penalties1)
y_mcp = cbind.data.frame(values = penalties2, method = "mcp")
x_par = cbind.data.frame(values = par1)
y_par = cbind.data.frame(values = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x, y)
head(data)
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "purple",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
head(data)
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
head(x)
head(y)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
source('~/learn-to-shine/compare-selectors/d3-test.R', echo=TRUE)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x, y)
head(data)
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
colors = "purple",
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
learner1 = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner2 = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.randomForest")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
sc = getCosealASScenario("SAT11-INDU")
llama.cv = convertToLlama(sc)
llama.cv = trainTest(llama.cv)
selector1 = regression(learner1, llama.cv)
selector2 = regression(learner2, llama.cv)
penalties1 = misclassificationPenalties(llama.cv, selector1)
penalties2 = misclassificationPenalties(llama.cv, selector2)
par1 = parscores(llama.cv, selector1)
par2 = parscores(llama.cv, selector2)
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x, y)
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
penalties1 = misclassificationPenalties(llama.cv, selector1)
penalties2 = misclassificationPenalties(llama.cv, selector2)
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
head(x_mcpa)
head(x_mcp)
data = cbind.data.frame(data, x_mcp, y_mcp)
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
head(data)
rm(data)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x_mcp, y_mcp)
head(data)
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
getwd()
setwd("~/learn-to-shine/compare-selectors/")
source("./helpers.R")
runApp('compareSelectors.R')
# combine both mcp and par scores
mcp_par = function(ids, penalties1, penalties2, par1, par2) {
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = ids)
data = cbind.data.frame(data, x_mcp, y_mcp)
return(data)
}
head(data)
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
penalties1 = misclassificationPenalties(llama.cv, selector1)
penalties1 = misclassificationPenalties(llama.cv, selector1)
penalties2 = misclassificationPenalties(llama.cv, selector2)
x_mcp
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids], x = penalties1)
head(data)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids], x = penalties1, y = penalties2, method = "par")
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
head(data)
d = data.frame(c1 = 1:5, m = "a")
d
runApp('compareSelectors.R')
runApp('compareSelectors.R')
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = ids)
ids = llama.cv$data[llama.cv$test[[1]], llama.cv$ids]
ids
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
head(x)
head(y)
data = data.frame(instance_id = ids)
# combine both mcp and par scores
mcp_par = function(ids, penalties1, penalties2, par1, par2) {
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = ids)
data = cbind.data.frame(data, x, y)
return(data)
}
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
learner1 = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.featureless")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
learner2 = makeImputeWrapper(learner = setHyperPars(makeLearner("regr.randomForest")),
classes = list(numeric = imputeMean(), integer = imputeMean(), logical = imputeMode(),
factor = imputeConstant("NA"), character = imputeConstant("NA")))
sc = getCosealASScenario("SAT11-INDU")
llama.cv = convertToLlama(sc)
llama.cv = trainTest(llama.cv)
selector1 = regression(learner1, llama.cv)
selector2 = regression(learner2, llama.cv)
penalties1 = misclassificationPenalties(llama.cv, selector1)
penalties2 = misclassificationPenalties(llama.cv, selector2)
par1 = parscores(llama.cv, selector1)
par1 = parscores(llama.cv, selector1)
par2 = parscores(llama.cv, selector2)
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = llama.cv$data[llama.cv$test[[1]], llama.cv$ids])
data = cbind.data.frame(data, x, y)
tooltip = paste("instance_id = ", data$instance_id, "<br>x = ", data$x, "<br>y = ", data$y)
scatterD3(data = data, x = x, y = y, col_var = method, tooltip_text = tooltip,
tooltip_position = "top right",
xlab = "regr.featureless", ylab = "regr.featureless",
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
lines = data.frame(slope = c(0, Inf, 1), intercept = c(0, 0, 0), stroke_width = 1,
stroke_dasharray = 5),
caption = list(text = paste("Misclassification Penalties for ", learner1$id, " vs. ", learner1$id),
title = "Misclassification Penalties"))
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('possible-bug.R')
x1 = data.frame(c1 = 1:5, m = "m")
y1 = data.frame(c1 = 5:10)
m1 = data.frame(c1 = 6:11, m = "a")
n1 = data.frame(c1 = 4:9)
x1
x1 = data.frame(x = 1:5)
y1 = data.frame(y = 5:10, m = "m")
m1 = data.frame(x = 6:11)
n1 = data.frame(y = 4:9, m = "a'")
letters
letters[1:5]
data = data.frame(ids = letters[1:5])
data = cbind.data.frame(data, x, y)
data
rm(data)
data = data.frame(ids = letters[1:5])
data = cbind.data.frame(data, x, y)
data
x1 = data.frame(x = 1:5)
y1 = data.frame(y = 5:10, m = "m")
m1 = data.frame(x = 6:11)
n1 = data.frame(y = 4:9, m = "a'")
x = rbind(x1, m1)
y = rbind(y1, n1)
data = data.frame(ids = letters[1:5])
head(data)
data = cbind.data.frame(data, x, y)
head(x)
head(y)
ids
i = letters[1:5]
i
rep(i, 2)
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('possible-bug.R')
runApp('possible-bug.R')
runApp('compareSelectors.R')
x_mcp = cbind.data.frame(x = penalties1)
head(x_mcp)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
data.frame(instance_id = ids, x = x_mcp, y = y_mcp)
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = rep(ids, 2))
data = cbind.data.frame(data, x, y)
head(data)
tail(data)
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
head(penalties1)
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
data = data.frame(instance_id = ids, x = x_mcp, y = y_mcp)
head(data)
rm(data)
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
data = data.frame(instance_id = ids, x = x_mcp, y = y_mcp)
head(Data)
head(data)
head(y_mcp)
data = data.frame(instance_id = ids, x = penalties1, y = penalties2, method = "mcp")
head(data)
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
rm(data)
data = data.frame(instance_id = rep(ids, 2))
data = cbind.data.frame(data, x, y)
head(data)
tail(data)
# build data for scatter plot
build_data = function(ids, penalties1 = NULL, penalties2 = NULL, par1 = NULL, par2 = NULL) {
# data for mcp
if(!is.null(penalties1) && !is.null(penalties2)) {
x_mcp = cbind.data.frame(x = penalties1)
y_mcp = cbind.data.frame(y = penalties2, method = "mcp")
data = data.frame(instance_id = ids, x = penalties1, y = penalties2, method = "mcp")
}
# data for par10
if (!is.null(par1) && !is.null(par2)) {
x_par = cbind.data.frame(x = par1)
y_par = cbind.data.frame(y = par2, method = "par10")
data = data.frame(instance_id = ids, x = par1, y = par2, method = "par10")
}
# data when both mcp and par10 are selected
if(!is.null(penalties1) && !is.null(penalties2)
&& !is.null(par1) && !is.null(par2)) {
x = rbind(x_mcp, x_par)
y = rbind(y_mcp, y_par)
data = data.frame(instance_id = rep(ids, 2))
data = cbind.data.frame(data, x, y)
}
return(data)
}
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
runApp('compareSelectors.R')
