size = 3, hjust = 1), legend.title = element_text(size = 7),
axis.text.y = element_text(size = 5, color = unlist(unname(scenario_colors))),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 4, hjust = 1), legend.title = element_text(size = 7),
axis.text.y = element_text(size = 5, color = unlist(unname(scenario_colors))),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 5, hjust = 1), legend.title = element_text(size = 7),
axis.text.y = element_text(size = 5, color = unlist(unname(scenario_colors))),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
data
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
scenario_colors
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
# format title
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 5, hjust = 1, color = unlist(unname(scenario_colors))),
legend.title = element_text(size = 7),
axis.text.y = element_text(size = 5, color = unlist(unname(scenario_colors))),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
# format title
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 5, hjust = 1),
legend.title = element_text(size = 7),
axis.text.y = element_text(size = 5),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
unlist(unname(scenario_colors)
)
scenario_colors
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
scenario_colors
data.original = read.csv("rmse_ratios.csv", stringsAsFactors = FALSE)
data.original = data.original[complete.cases(data.original), ]
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
# format title
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 4, hjust = 1,
color = unlist(unname(scenario_colors))),
axis.text.y = element_text(size = 5),
legend.title = element_text(size = 7),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
var = unique(data.original$variable)[1]
var
data = subset(data.original, variable == var)
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
scenario_colors
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
scenarios
data$solver
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios
i
i=1
s.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
levels(data$solver)
data = subset(data.original, variable == var)
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
scenario_colors
data.original = read.csv("rmse_ratios.csv", stringsAsFactors = FALSE)
data.original = data.original[complete.cases(data.original), ]
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
# format title
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 4, hjust = 1,
color = unlist(unname(scenario_colors))),
axis.text.y = element_text(size = 5),
legend.title = element_text(size = 7),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
library(ggplot2)
library(dplyr)
CapStr = function(y) {
c = strsplit(y, " ")[[1]]
paste(toupper(substring(c, 1,1)), substring(c, 2),
sep="", collapse=" ")
}
# define color palette
cbbPalette = list(grey = "#999999", black = "#000000", orange = "#E69F00", sky = "#56B4E9", green = "#009E73", yellow = "#F0E442", blue = "#0072B2", darko = "#D55E00",
pink = "#CC79A7")
data.original = read.csv("rmse_ratios.csv", stringsAsFactors = FALSE)
data.original = data.original[complete.cases(data.original), ]
data.original$value
data.original$value - 1
data.original = read.csv("rmse_ratios.csv", stringsAsFactors = FALSE)
data.original = data.original[complete.cases(data.original), ]
data.original$value = data.original$value - 1
for(var in unique(data.original$variable)) {
data = subset(data.original, variable == var)
# append _INDU or _HAND for same solvers in different scenarios
ind_indu = data[data$scenario == "SAT11-INDU", ]$solver %in% data[data$scenario == "SAT11-HAND", ]$solver
ind_hand = data[data$scenario == "SAT11-HAND", ]$solver %in% data[data$scenario == "SAT11-INDU", ]$solver
data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver = paste0(data[data$scenario == "SAT11-INDU", ][ind_indu, ]$solver, "_INDU")
data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver = paste0(data[data$scenario == "SAT11-HAND", ][ind_hand, ]$solver, "_HAND")
# grouped bar plot
data = arrange(data, scenario)
data = dplyr::mutate(data, solver = factor(solver, levels = unique(data$solver)))
# color x-axis solver text
scenarios = vector(length = length(unique(data$solver)), mode = "character")
for(i in seq_along(1:length(scenarios))) {
scenarios[i] = as.character(data[data$solver == levels(data$solver)[i], ]$scenario[1])
}
scenarios = as.factor(scenarios)
scenario_colors = cbbPalette[as.numeric(scenarios)]
# format title
exp.type = gsub(var, pattern = "_", replacement = " ")
exp.type = gsub(exp.type, pattern = "\\.", replacement = " ")
title = CapStr(exp.type)
title = sprintf("%s RMSE Ratios", title)
pdf(sprintf("./summary-overall-rsq/barplot_%s.pdf", var))
plot = ggplot(data, aes(x = solver, y = value)) +
geom_bar(aes(fill = scenario), position = "dodge", stat="identity") +
scale_fill_manual(values = unlist(unname(cbbPalette)))
plot = plot + ggtitle(title) +
xlab("Solver") + ylab("Ratio")
plot = plot + theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 4, hjust = 1,
color = unlist(unname(scenario_colors))),
axis.text.y = element_text(size = 5),
legend.title = element_text(size = 7),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 3))
print(plot)
dev.off()
}
library(shiny); runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
library(llama)
library(aslib)
?aslib
??aslib
help(aslib)
a = getCosealASScenario("SAT11-INDU")
runApp('~/learn-to-shine/compareSelectors.R')
runApp('compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/stockVis')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
# Define UI ----
if (interactive()) {
ui = fluidPage(
titlePanel(strong("Comparing Selectors")),
sidebarLayout(
sidebarPanel(
p("Compare algorithm selectors with ASlib scenarios"),
textInput("input-scenario", label = h3(strong("Type ASlib scenario")),
placeholder = "ex. SAT11-INDU"),
verbatimTextOutput("scenario-name")
),
mainPanel()
)
)
# Define server logic ----
server = function(input, output) {
output$scenario-name = renderText({ input$input-scenario })
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
runApp('~/learn-to-shine/ex.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
?textInput
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
runApp('~/learn-to-shine/compareSelectors.R')
library(shiny); runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
?req
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
# make plot text
make_text = function(metric, selector1, selector2) {
if(metric == "mcp") {
return(paste("Misclassification Penalties for ", selector1, " vs. ", selector2))
} else if (metric == "par10") {
return(paste("PAR10 Scores for ", selector1, " vs. ", selector2))
}
}
make_text("mcp", "a", "b")
make_text("par10", "a", "b")
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
val = reactiveValues()
val
val$a = 3
val
val$a
val
val()
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
install.packages("shinythemes")
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
library(shiny); runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
print(source('experiments/replicate-bug.R')$value)
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
mtcars
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/compareSelectors.R')
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
mtcars
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
mtcars
scatterD3(data = mtcars, x = mpg, y = disp,
xlab = input$selector1, ylab = input$selector2,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
caption = list(text = plot.text(),
title = title()),
transitions = TRUE)
scatterD3(data = mtcars, x = mpg, y = disp,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
caption = list(text = plot.text(),
title = title()),
transitions = TRUE)
scatterD3(data = mtcars, x = mpg, y = disp,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
transitions = TRUE)
scatterD3(data = mtcars, x = "mpg", y = disp,
point_size = 100, point_opacity = 0.5,
hover_size = 3, hover_opacity = 1,
color = "purple",
transitions = TRUE)
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
var = "mpg"
as.name(var
)
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
runApp('~/learn-to-shine/compare-selectors/experiments/replicate-bug.R')
getwd()
setwd("~/learn-to-shine/rshiny-lessons/modules/")
library(shiny)
source("./uiModule.R")
runApp()
histogramApp <- function() {
ui <- fluidPage(
histogramUI("hist1")
)
server <- function(input, output, session) {
histogramServer("hist1")
}
shinyApp(ui, server)
}
runApp()
runApp()
ui <- fluidPage(
histogramUI("hist1")
)
server <- function(input, output, session) {
histogramServer("hist1")
}
shinyApp(ui, server)
?moduleServer
??shiny
runApp()
?NS
setwd("../../compare-selectors/modules/")
?callModule
runApp()
runApp()
runApp()
